*xcode-build-server.txt*	Xcode Build Server integration for Neovim

Author: xcode-build-server.nvim contributors
License: MIT

==============================================================================
CONTENTS							*xcode-build-server-contents*

    1. Introduction ......................... |xcode-build-server-introduction|
    2. Requirements ......................... |xcode-build-server-requirements|
    3. Installation ......................... |xcode-build-server-installation|
    4. Configuration ........................ |xcode-build-server-configuration|
    5. Commands ............................. |xcode-build-server-commands|
    6. Functions ............................ |xcode-build-server-functions|
    7. Health ............................... |xcode-build-server-health|
    8. FAQ .................................. |xcode-build-server-faq|

==============================================================================
1. INTRODUCTION						*xcode-build-server-introduction*

xcode-build-server.nvim is a Neovim plugin that seamlessly integrates 
xcode-build-server to enable sourcekit-lsp support for Xcode projects. This
allows iOS/macOS developers to use Neovim with full LSP capabilities for
Swift, C, C++, Objective-C, and Objective-C++ development.

The plugin automatically discovers Xcode projects and workspaces, queries
available schemes, and generates the necessary buildServer.json configuration
file for sourcekit-lsp integration.

==============================================================================
2. REQUIREMENTS						*xcode-build-server-requirements*

- Neovim >= 0.8.0
- xcode-build-server (install via: brew install xcode-build-server)
- Xcode or Xcode Command Line Tools
- sourcekit-lsp (usually included with Xcode)

==============================================================================
3. INSTALLATION						*xcode-build-server-installation*

Using lazy.nvim: >
    {
      'your-username/xcode-build-server.nvim',
      ft = { 'swift', 'objc', 'objcpp' },
      config = function()
        require('xcode-build-server').setup()
      end
    }
<

Using packer.nvim: >
    use {
      'your-username/xcode-build-server.nvim',
      config = function()
        require('xcode-build-server').setup()
      end
    }
<

==============================================================================
4. CONFIGURATION					*xcode-build-server-configuration*

The plugin can be configured by passing options to the setup function:

>
    require('xcode-build-server').setup({
      search_depth = 3,           -- How deep to search for projects
      timeout = 10000,            -- Command timeout in milliseconds
      auto_setup = false,         -- Auto-setup when opening Xcode projects (opt-in)
      restart_lsp = true,         -- Restart LSP after configuration
      build_server_path = "xcode-build-server",  -- Path to executable
      picker = {
        backend = "vim_ui",       -- Options: "vim_ui", "telescope", "fzf"
        telescope = {
          theme = "dropdown",
          layout_config = {
            width = 0.8,
            height = 0.6,
          }
        },
        fzf = {
          winopts = {
            width = 0.8,
            height = 0.6,
          }
        }
      }
    })
<

Options:~
    search_depth	(number)	Maximum depth to search for Xcode projects
    timeout		(number)	Timeout for xcodebuild commands (ms)
    auto_setup		(boolean)	Automatically setup buildServer.json (default: false)
    restart_lsp		(boolean)	Prompt to restart LSP after setup
    build_server_path	(string)	Path to xcode-build-server executable
    picker		(table)		Picker configuration options

Picker Options:~
    picker.backend	(string)	Picker backend: "vim_ui", "telescope", "fzf"
    picker.telescope	(table)		Telescope-specific configuration
    picker.fzf		(table)		FZF-lua-specific configuration

The picker configuration allows you to use different selection interfaces:
- "vim_ui": Default Neovim vim.ui.select
- "telescope": telescope.nvim integration (requires telescope.nvim)
- "fzf": fzf-lua integration (requires fzf-lua)

Example telescope configuration: >
    picker = {
      backend = "telescope",
      telescope = {
        theme = "dropdown",  -- or "ivy", "cursor", etc.
        layout_config = {
          width = 0.8,
          height = 0.6,
        }
      }
    }
<

Example fzf-lua configuration: >
    picker = {
      backend = "fzf",
      fzf = {
        winopts = {
          width = 0.8,
          height = 0.6,
          border = "rounded",
        }
      }
    }
<

The plugin automatically falls back to vim.ui.select if the configured
picker is not available.

==============================================================================
5. COMMANDS						*xcode-build-server-commands*

:XcodeBuildServerSetup					*:XcodeBuildServerSetup*
    Interactively setup xcode-build-server for the current project.
    This command will:
    1. Find available Xcode projects/workspaces
    2. Let you select a project
    3. Let you select a scheme
    4. Generate buildServer.json configuration
    5. Optionally restart LSP clients

:XcodeBuildServerStatus					*:XcodeBuildServerStatus*
    Show the current status of xcode-build-server configuration.
    Displays information about:
    - Current working directory
    - buildServer.json presence
    - xcode-build-server availability
    - Version information

:XcodeBuildServerRestart				*:XcodeBuildServerRestart*
    Restart sourcekit LSP clients to apply configuration changes.

==============================================================================
6. FUNCTIONS						*xcode-build-server-functions*

require('xcode-build-server').setup({opts})		*xcode-build-server.setup()*
    Setup the plugin with optional configuration.

require('xcode-build-server').setup_interactive()	*xcode-build-server.setup_interactive()*
    Interactively setup xcode-build-server configuration.

require('xcode-build-server').status()			*xcode-build-server.status()*
    Display current plugin status.

require('xcode-build-server').restart_lsp()		*xcode-build-server.restart_lsp()*
    Restart LSP clients.

require('xcode-build-server').health()			*xcode-build-server.health()*
    Return health check results for debugging.

==============================================================================
7. HEALTH						*xcode-build-server-health*

The plugin provides health checks that can be run via:
>
    :lua vim.print(require('xcode-build-server').health())
<

Health checks verify:
- xcode-build-server installation and version
- buildServer.json presence in current directory
- Xcode project detection
- Scheme availability

==============================================================================
8. FAQ							*xcode-build-server-faq*

Q: LSP features aren't working after setup
A: Make sure sourcekit-lsp is installed and the LSP client has been restarted.
   Try running :XcodeBuildServerRestart.

Q: "xcode-build-server not found" error
A: Install xcode-build-server via Homebrew: brew install xcode-build-server

Q: No schemes found for my project
A: Ensure your Xcode project is valid and has at least one scheme configured.
   Try opening the project in Xcode first.

Q: Plugin doesn't detect my workspace
A: Make sure you're in the correct directory containing the .xcworkspace file.
   The plugin searches up to 3 levels deep by default.

Q: How do I enable automatic setup?
A: Set auto_setup = true in your configuration:
>
    require('xcode-build-server').setup({
      auto_setup = true
    })
<
Auto-setup is disabled by default. When enabled, it will automatically
detect Xcode projects and configure buildServer.json. For projects with
multiple schemes, it will prompt you to select one.

Q: How do I use telescope or fzf-lua for selection instead of vim.ui.select?
A: Configure the picker backend in your setup:
>
    -- For telescope
    require('xcode-build-server').setup({
      picker = {
        backend = "telescope"
      }
    })
    
    -- For fzf-lua  
    require('xcode-build-server').setup({
      picker = {
        backend = "fzf"
      }
    })
<

Q: The picker falls back to vim.ui.select even though I configured telescope/fzf
A: Make sure you have the required plugin installed:
   - For telescope: install telescope.nvim
   - For fzf: install fzf-lua
   The plugin automatically detects availability and falls back gracefully.

==============================================================================
vim:tw=78:ts=8:ft=help:norl: