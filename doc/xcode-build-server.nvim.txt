*xcode-build-server.nvim.txt*    For NVIM v0.8.0   Last change: 2025 August 01

==============================================================================
Table of Contents                  *xcode-build-server.nvim-table-of-contents*

1. xcode-build-server.nvim   |xcode-build-server.nvim-xcode-build-server.nvim|
  - Features        |xcode-build-server.nvim-xcode-build-server.nvim-features|
  - Requirements|xcode-build-server.nvim-xcode-build-server.nvim-requirements|
  - Installation|xcode-build-server.nvim-xcode-build-server.nvim-installation|
  - Configuration|xcode-build-server.nvim-xcode-build-server.nvim-configuration|
  - Usage              |xcode-build-server.nvim-xcode-build-server.nvim-usage|
  - How it Works|xcode-build-server.nvim-xcode-build-server.nvim-how-it-works|
  - Troubleshooting|xcode-build-server.nvim-xcode-build-server.nvim-troubleshooting|
  - Contributing|xcode-build-server.nvim-xcode-build-server.nvim-contributing|
  - License          |xcode-build-server.nvim-xcode-build-server.nvim-license|

==============================================================================
1. xcode-build-server.nvim   *xcode-build-server.nvim-xcode-build-server.nvim*

A Neovim plugin that seamlessly integrates xcode-build-server to enable
sourcekit-lsp support for Xcode projects. This allows iOS/macOS developers to
use Neovim with full LSP capabilities for Swift, C, C++, Objective-C, and
Objective-C++ development.


FEATURES            *xcode-build-server.nvim-xcode-build-server.nvim-features*

- 🔍 **Automatic Project Discovery**: Finds Xcode projects and workspaces in your directory tree
- 🎯 **Scheme Selection**: Interactive picker for available build schemes
- ⚙️ **Configuration Generation**: Automatically creates `buildServer.json` for sourcekit-lsp
- 🔄 **LSP Integration**: Seamless integration with Neovim’s built-in LSP client
- 🏥 **Health Checks**: Built-in diagnostics to verify your setup
- 🚀 **Auto Setup**: Optional automatic configuration when opening Xcode projects (opt-in)


REQUIREMENTS    *xcode-build-server.nvim-xcode-build-server.nvim-requirements*

- Neovim >= 0.8.0
- xcode-build-server <https://github.com/SolaWing/xcode-build-server> (install via: `brew install xcode-build-server`)
- Xcode or Xcode Command Line Tools
- sourcekit-lsp (usually included with Xcode)


INSTALLATION    *xcode-build-server.nvim-xcode-build-server.nvim-installation*


USING LAZY.NVIM ~

>lua
    {
      'okwasniewski/xcode-build-server.nvim',
      ft = { 'swift', 'objc', 'objcpp' },
      config = function()
        require('xcode-build-server').setup()
      end
    }
<


USING PACKER.NVIM ~

>lua
    use {
      'okwasniewski/xcode-build-server.nvim',
      config = function()
        require('xcode-build-server').setup()
      end
    }
<


CONFIGURATION  *xcode-build-server.nvim-xcode-build-server.nvim-configuration*

The plugin works out of the box with sensible defaults. You can customize it by
passing options to the setup function:

>lua
    require('xcode-build-server').setup({
      search_depth = 3,           -- How deep to search for projects
      timeout = 10000,            -- Command timeout in milliseconds  
      auto_setup = false,         -- Auto-setup when opening Xcode projects (opt-in)
      restart_lsp = true,         -- Restart LSP after configuration
      build_server_path = "xcode-build-server",  -- Path to executable
      picker = {
        backend = "vim_ui",       -- Options: "vim_ui", "telescope", "fzf"
        telescope = {
          theme = "dropdown",
          layout_config = {
            width = 0.8,
            height = 0.6,
          }
        },
        fzf = {
          winopts = {
            width = 0.8,
            height = 0.6,
          }
        }
      }
    })
<


PICKER CONFIGURATION ~

The plugin supports multiple picker backends for selecting projects and
schemes:


DEFAULT VIM.UI.SELECT

>lua
    require('xcode-build-server').setup({
      picker = {
        backend = "vim_ui"  -- Default Neovim picker
      }
    })
<


TELESCOPE INTEGRATION

Requires telescope.nvim <https://github.com/nvim-telescope/telescope.nvim>:

>lua
    require('xcode-build-server').setup({
      picker = {
        backend = "telescope",
        telescope = {
          theme = "dropdown",     -- or "ivy", "cursor", etc.
          layout_config = {
            width = 0.8,
            height = 0.6,
            preview_cutoff = 120,
          }
        }
      }
    })
<


FZF-LUA INTEGRATION

Requires fzf-lua <https://github.com/ibhagwan/fzf-lua>:

>lua
    require('xcode-build-server').setup({
      picker = {
        backend = "fzf",
        fzf = {
          winopts = {
            width = 0.8,
            height = 0.6,
            border = "rounded",
          }
        }
      }
    })
<

The plugin automatically falls back to `vim.ui.select` if the configured picker
is not available.


AUTO SETUP (OPTIONAL) ~

By default, the plugin requires manual setup using `:XcodeBuildServerSetup`.
You can enable automatic configuration by setting `auto_setup = true`:

>lua
    require('xcode-build-server').setup({
      auto_setup = true  -- Enable automatic buildServer.json generation
    })
<

When enabled, auto setup will: - Automatically detect Xcode projects when you
open files - For single scheme projects: configure silently - For multiple
schemes: prompt you to select a scheme using your configured picker - Skip
projects that already have buildServer.json


USAGE                  *xcode-build-server.nvim-xcode-build-server.nvim-usage*


INTERACTIVE SETUP ~

Run the setup command to configure xcode-build-server for your project:

>vim
    :XcodeBuildServerSetup
<

This will: 1. Find available Xcode projects/workspaces 2. Let you select a
project 3. Let you select a scheme 4. Generate `buildServer.json` configuration
5. Optionally restart LSP clients


CHECK STATUS ~

View current configuration status:

>vim
    :XcodeBuildServerStatus
<


RESTART LSP ~

Restart sourcekit LSP clients after configuration changes:

>vim
    :XcodeBuildServerRestart
<


HOW IT WORKS    *xcode-build-server.nvim-xcode-build-server.nvim-how-it-works*

The plugin bridges the gap between Apple’s sourcekit-lsp and Xcode projects
by:

1. **Project Discovery**: Scans your directory tree for `.xcodeproj` and `.xcworkspace` files
2. **Scheme Detection**: Uses `xcodebuild -list` to find available build schemes
3. **Configuration Generation**: Creates a `buildServer.json` file that tells sourcekit-lsp how to communicate with xcode-build-server
4. **LSP Integration**: Works with Neovim’s built-in LSP client for features like:- Code completion
- Diagnostics
- Go to definition
- Symbol search
- And more!




TROUBLESHOOTING*xcode-build-server.nvim-xcode-build-server.nvim-troubleshooting*


LSP FEATURES AREN’T WORKING ~

- Ensure sourcekit-lsp is installed (comes with Xcode)
- Restart LSP clients with `:XcodeBuildServerRestart`
- Check `:XcodeBuildServerStatus` for configuration issues


“XCODE-BUILD-SERVER NOT FOUND” ERROR ~

Install xcode-build-server via Homebrew:

>bash
    brew install xcode-build-server
<


NO SCHEMES FOUND ~

- Ensure your Xcode project is valid
- Try opening the project in Xcode first to verify schemes exist
- Check that you’re in the correct directory


CONTRIBUTING    *xcode-build-server.nvim-xcode-build-server.nvim-contributing*

Contributions are welcome! Please feel free to submit a Pull Request.


LICENSE              *xcode-build-server.nvim-xcode-build-server.nvim-license*

MIT

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
